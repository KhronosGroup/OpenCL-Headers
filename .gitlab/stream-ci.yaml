stages:
  - build   # Test if headers build and install (CMake)
  - test    # Test if unit tests pass (CTest)
  - consume # Test if downstream can depend on installs (CMake)

variables:
  DEPS_DIR:      "$CI_PROJECT_DIR/dependencies"
  BUILD_DIR:     "$CI_PROJECT_DIR/build"
  INSTALL_DIR:   "$CI_PROJECT_DIR/install"
  CMAKE_MINIMUM: "3.0.2"
  CMAKE_LATEST:  "3.21.2"

########################
##                    ##
## Setup environments ##
##                    ##
########################

.toolchain-matrix-minimum:
  image: streamhpc/opencl-sdk-base:ubuntu-18.04-20210908
  parallel:
    matrix:
  # NOTE: Old CMake versions will likely not use cutting-edge compilers
      - COMPILER: [g++-7, g++-8, clang-8, clang-9, clang-10]
  before_script:
    - export PATH=/opt/Kitware/CMake/$CMAKE_MINIMUM/bin:$PATH

.toolchain-matrix-latest:
  image: streamhpc/opencl-sdk-base:ubuntu-18.04-20210908
  parallel:
    matrix:
  # NOTE: Cutting edge CMake versions will likely not use old compilers
      - COMPILER: [g++-9, g++-10, clang-11, clang-12, clang-13]
  before_script:
    - export PATH=/opt/Kitware/CMake/$CMAKE_LATEST/bin:$PATH


#################
##             ##
## Build stage ##
##             ##
#################

build:cmake-minimum:
  extends: .toolchain-matrix-minimum
  stage: build
  # NOTE 1: CMake creates build and install folders as needed.
  # NOTE 2: Lack of space in -H<folder> -B<folder> is important!
  #         https://stackoverflow.com/a/20611964/1476661
  script:
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=$COMPILER
      -D CMAKE_BUILD_TYPE=Release
      -D BUILD_TESTING=ON
      -D CMAKE_INSTALL_PREFIX=$INSTALL_DIR
      -B$BUILD_DIR
      -H$CI_PROJECT_DIR
    - cmake
      --build $BUILD_DIR
      --target install
  artifacts:
    paths:
      - build/
      - install/
    exclude:
      - build/**/CMakeFiles/
    expire_in: 2 weeks

build:cmake-latest:
  extends: .toolchain-matrix-latest
  stage: build
  script:
    - cmake
      -G "Ninja Multi-Config"
      -D CMAKE_CXX_COMPILER=$COMPILER
      -D BUILD_TESTING=ON
      -D CMAKE_INSTALL_PREFIX=$INSTALL_DIR
      -B $BUILD_DIR
      -S $CI_PROJECT_DIR
    - cmake
      --build $BUILD_DIR
      --config Debug
      --target install
    - cmake
      --build $BUILD_DIR
      --config Release
      --target install
  artifacts:
    paths:
      - build/
      - install/
    exclude:
      - build/**/CMakeFiles/
    expire_in: 2 weeks


################
##            ##
## Test stage ##
##            ##
################

## ROCm

test:cmake-minimum:
  extends: .toolchain-matrix-minimum
  stage: test
  needs:
    - build:cmake-minimum
  # NOTE: CTest has to be invoked from the build folder.
  script:
    - cd $BUILD_DIR
    - ctest --output-on-failure

test:cmake-latest:
  extends: .toolchain-matrix-minimum
  stage: test
  needs:
    - build:cmake-latest
  # NOTE: CTest has to be invoked from the build folder.
  script:
    - cd $BUILD_DIR
    - ctest --output-on-failure -C Debug
    - ctest --output-on-failure -C Release 

###################
##               ##
## Consume stage ##
##               ##
###################

## ROCm

consume:cmake-minimum:
  extends: .toolchain-matrix-minimum
  stage: consume
  needs:
    - build:cmake-minimum
    - test:cmake-minimum
  # NOTE 1: CMake creates build and install folders as needed.
  # NOTE 2: Lack of space in -H<folder> -B<folder> is important!
  #         https://stackoverflow.com/a/20611964/1476661
  script:
    - cmake
      -G Ninja
      -D CMAKE_CXX_COMPILER=$COMPILER
      -D CMAKE_BUILD_TYPE=Release
      -D CMAKE_PREFIX_PATH=$INSTALL_DIR
      -B$CI_PROJECT_DIR/downstream/bare
      -H$CI_PROJECT_DIR/tests/pkgconfig/bare
    - cmake
      --build $CI_PROJECT_DIR/downstream/bare
    # Emulate the presence of the SDK
    - cmake -E make_directory $CI_PROJECT_DIR/install/share/cmake/OpenCL
    - echo 'include("${CMAKE_CURRENT_LIST_DIR}/../OpenCLHeaders/OpenCLHeadersTargets.cmake")' > $CI_PROJECT_DIR/install/share/cmake/OpenCL/OpenCLConfig.cmake
    - cmake
      -G Ninja
      -D CMAKE_BUILD_TYPE=Release
      -D CMAKE_PREFIX_PATH=$INSTALL_DIR
      -B$CI_PROJECT_DIR/downstream/sdk
      -H$CI_PROJECT_DIR/tests/pkgconfig/sdk
    - cmake
      --build $CI_PROJECT_DIR/downstream/sdk

consume:cmake-latest:
  extends: .toolchain-matrix-latest
  stage: consume
  needs:
    - build:cmake-latest
    - test:cmake-latest
  script:
    - cmake
      -G "Ninja Multi-Config"
      -D CMAKE_CXX_COMPILER=$COMPILER
      -D CMAKE_PREFIX_PATH=$CI_PROJECT_DIR/install
      -B $CI_PROJECT_DIR/downstream/bare
      -S $CI_PROJECT_DIR/tests/pkgconfig/bare
    - cmake
      --build downstream/bare
      --config Debug
    - cmake
      --build downstream/bare
      --config Release
    # Emulate the presence of the SDK
    - cmake -E
      make_directory $CI_PROJECT_DIR/install/share/cmake/OpenCL
    - echo 'include("${CMAKE_CURRENT_LIST_DIR}/../OpenCLHeaders/OpenCLHeadersTargets.cmake")' > $CI_PROJECT_DIR/install/share/cmake/OpenCL/OpenCLConfig.cmake
    - cmake
      -G "Ninja Multi-Config"
      -D CMAKE_PREFIX_PATH=$CI_PROJECT_DIR/install
      -B ./downstream/sdk
      -S ./tests/pkgconfig/sdk
    - cmake
      --build downstream/sdk
      --config Debug
    - cmake
      --build downstream/sdk
      --config Release
